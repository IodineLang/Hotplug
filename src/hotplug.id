use os;
use fsutils;
use inspect;
use configfile;

func _joinPaths (prefix, suffix) {
    if (prefix.endswith ("/")) {
        return prefix + suffix;
    }
    
    return "#{prefix}/#{suffix}";
}

contract IPlugin {
    func activate (args);
    func deactivate (args);
}

class PluginManager {
    class Plugin {
        func Plugin (self, modulePath, name, className) {
            self.modulePath = modulePath
            self.name = name
            self.className = className;
            self.activated = false;
        }

        func load (self) {
            self.module = loadmodule (self.modulePath);
            self._doLoad (self.module);
        }

        func reload (self) {
            self.module = reload (self.module);
            self._doLoad (self.module);
        }

        func _doLoad (self, module) {
            module (); # Initialize the module by invoking its initializer

            attributes = inspect.getattributes (module);
            
            if (!attributes.contains (self.className)) {
                raise PluginLoadException ("Could not find class!");
            } else {
                self.pluginObject = attributes [self.className] ();
            }
        }

        func activate (self, *args) {
            if (!self.activated) {
                self.pluginObject.activate (*args);
                self.activated = true;
            } else {
                raise PluginLoadException ("Plugin already activated!");
            }
        }

        func deactivate (self, *args) {
            if (self.activated) {
                self.pluginObject.deactivate (*args);
                self.activated = false;
            } else {
                raise PluginLoadException ("Plugin not activated!");
            }
        }
    }

    func PluginManager (self) {
        self.plugins = [];
        self.pluginDirs = [];
    }

    func addDirectory (self, dir) {
        self.pluginDirs.append (dir);
    }

    func activateAll (self, *args) {
        for (plugin in self.plugins) {
            plugin.activate (*args);
        }
    }

    func activate (self, name, *args) {
        for (plugin in self.plugins) {
            if (plugin.name == name) {
                plugin.activate (*args)
            }
        }
    }

    func deactivate (self, name, *args) {
        for (plugin in self.plugins) {
            if (plugin.name == name) {
                plugin.deactivate (*args)
            }
        }
    }

    func reload (self, name, *args) {
        for (plugin in self.plugins) {
            if (plugin.name == name) {
                plugin.reload ()
            }
        }
    }

    func deactivateAll (self, *args) {
        for (plugin in self.plugins) {
            plugin.deactivate (*args);
        }
    }

    func collect (self, *args) {
        for (dir in self.pluginDirs) {
            for (file in os.list (dir)) {
                if (fsutils.isfile (file) && file.endswith (".plugin")) {
                    plugin = self._loadPlugin (file, dir);
                    try {
                        plugin.load ();
                        self.plugins.append (plugin);
                    } except (ex) {
                        raise PluginLoadException ("Could not load #{file}");
                    }
                }
            }
        }
    }

    func _loadPlugin (self, configFile, dir) {
        config = configfile.ConfigFile.open (configFile);
        if (config.hassection ("plugin")) {
            pluginSec = config.sections ["plugin"];
            name = pluginSec.get ("name");
            version = pluginSec.get ("version", "v1.0.0");
            author = pluginSec.get ("author", "Unknown");
            module = _joinPaths (dir, pluginSec.get ("module"));
            className = pluginSec.get ("class");
            return PluginManager.Plugin (module, name, className);
        }
    }
}

class PluginLoadException extends Exception {
    func PluginLoadException (self, message) {
        super (message);
    }
}
